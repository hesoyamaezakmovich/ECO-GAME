// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const CARD_SETS = {
    set1: {
        name: "–ù–∞–±–æ—Ä 1",
        items: [
            { name: "–ë–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞", emoji: "üçå", decompositionTime: "3-4 –Ω–µ–¥–µ–ª–∏", correct: 1 },
            { name: "–û–≥—Ä—ã–∑–æ–∫ —è–±–ª–æ–∫–∞", emoji: "üçé", decompositionTime: "2 –º–µ—Å—è—Ü–∞", correct: 2 },
            { name: "–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞", emoji: "üì¶", decompositionTime: "3 –º–µ—Å—è—Ü–∞", correct: 3 },
            { name: "–ö–æ–Ω—Å–µ—Ä–≤–Ω–∞—è –±–∞–Ω–∫–∞", emoji: "ü•´", decompositionTime: "50 –ª–µ—Ç", correct: 4 },
            { name: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞", emoji: "üß¥", decompositionTime: "450 –ª–µ—Ç", correct: 5 }
        ]
    },
    set2: {
        name: "–ù–∞–±–æ—Ä 2",
        items: [
            { name: "–õ–∏—Å—Ç—å—è", emoji: "üçÇ", decompositionTime: "2-4 –Ω–µ–¥–µ–ª–∏", correct: 1 },
            { name: "–ì–∞–∑–µ—Ç–∞", emoji: "üì∞", decompositionTime: "1-2 –º–µ—Å—è—Ü–∞", correct: 2 },
            { name: "–ö–æ–∂–∞–Ω—ã–π –±–æ—Ç–∏–Ω–æ–∫", emoji: "üëû", decompositionTime: "25-40 –ª–µ—Ç", correct: 3 },
            { name: "–ó–∞–∂–∏–≥–∞–ª–∫–∞", emoji: "üî•", decompositionTime: "100 –ª–µ—Ç", correct: 4 },
            { name: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞", emoji: "üçæ", decompositionTime: "1000+ –ª–µ—Ç", correct: 5 }
        ]
    },
    set3: {
        name: "–ù–∞–±–æ—Ä 3",
        items: [
            { name: "–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞", emoji: "‚òï", decompositionTime: "2-3 –Ω–µ–¥–µ–ª–∏", correct: 1 },
            { name: "–ë—É–º–∞–∂–Ω—ã–π –ø–∞–∫–µ—Ç", emoji: "üõçÔ∏è", decompositionTime: "2 –º–µ—Å—è—Ü–∞", correct: 2 },
            { name: "–®–µ—Ä—Å—Ç—è–Ω–æ–π –Ω–æ—Å–æ–∫", emoji: "üß¶", decompositionTime: "1-5 –ª–µ—Ç", correct: 3 },
            { name: "–ë–∞—Ç–∞—Ä–µ–π–∫–∞", emoji: "üîã", decompositionTime: "100 –ª–µ—Ç", correct: 4 },
            { name: "CD –¥–∏—Å–∫", emoji: "üíø", decompositionTime: "1000 –ª–µ—Ç", correct: 5 }
        ]
    }
    return newArray;
}

function showFeedback(message, type = 'success') {
    const existingFeedback = document.querySelector('.feedback-popup');
    if (existingFeedback) {
        existingFeedback.remove();
    }

    const popup = document.createElement('div');
    popup.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ' +
                     'bg-white rounded-xl shadow-lg p-6 z-50 text-center';
    popup.innerHTML = `
        <div class="text-xl font-bold ${type === 'success' ? 'text-green-600' : 'text-red-600'}">
            ${message}
        </div>
    `;
    document.body.appendChild(popup);
    setTimeout(() => popup.remove(), 1500);
}

function showScreen(screenId) {
    document.querySelectorAll('.game-container').forEach(container => {
        container.style.display = 'none';
    });
    document.getElementById(screenId).style.display = 'block';
}

function backToMenu() {
    showScreen('menu');
}

function initDecompositionGame() {
    const setButtonsContainer = document.getElementById('set-buttons');
    setButtonsContainer.innerHTML = '';
    
    Object.entries(CARD_SETS).forEach(([key, set]) => {
        const button = document.createElement('button');
        button.className = `set-button ${currentSet === key ? 'bg-green-600 text-white' : 'bg-gray-200'}`;
        button.textContent = set.name;
        button.addEventListener('touchend', () => selectSet(key));
        setButtonsContainer.appendChild(button);
    });

    selectSet(currentSet);
}

function selectSet(setKey) {
    currentSet = setKey;
    currentItems = shuffle([...CARD_SETS[setKey].items]);
    showTimes = false;
    renderItems();

    document.querySelectorAll('#set-buttons button').forEach(button => {
        button.className = `set-button px-4 py-2 rounded-lg ${
            button.textContent === CARD_SETS[setKey].name ? 'bg-green-600 text-white' : 'bg-gray-200'
        }`;
    });
}

function renderItems() {
    const container = document.getElementById('items-container');
    container.innerHTML = '';

    currentItems.forEach((item, index) => {
        const card = document.createElement('div');
        card.className = 'item-card';
        card.dataset.index = index;
        card.innerHTML = `
            <div class="flex items-center p-6">
                <div class="text-4xl mr-4">${item.emoji}</div>
                <div class="flex-grow">
                    <div class="text-xl font-bold">${item.name}</div>
                    ${showTimes ? `
                        <div class="text-green-600 mt-1">${item.decompositionTime}</div>
                    ` : ''}
                </div>
                <div class="text-gray-400 text-2xl">‚ãÆ‚ãÆ</div>
            </div>
        `;

        setupDragListeners(card);
        container.appendChild(card);
    });
}

function setupDragListeners(card) {
    let startY = 0;
    let initialPosition = 0;
    
    card.addEventListener('touchstart', (e) => {
        e.preventDefault();
        startY = e.touches[0].clientY;
        initialPosition = card.offsetTop;
        card.classList.add('dragging');
    });

    card.addEventListener('touchmove', (e) => {
        if (!card.classList.contains('dragging')) return;
        
        const currentY = e.touches[0].clientY;
        const deltaY = currentY - startY;
        
        card.style.transform = `translateY(${deltaY}px)`;

        const cards = [...document.querySelectorAll('.item-card:not(.dragging)')];
        const cardBelow = cards.find(otherCard => {
            const box = otherCard.getBoundingClientRect();
            return currentY >= box.top && currentY <= box.bottom;
        });

        if (cardBelow) {
            const draggedIndex = parseInt(card.dataset.index);
            const targetIndex = parseInt(cardBelow.dataset.index);
            
            if (draggedIndex !== targetIndex) {
                const item = currentItems[draggedIndex];
                currentItems.splice(draggedIndex, 1);
                currentItems.splice(targetIndex, 0, item);
                renderItems();
                
                const newCard = document.querySelector(`[data-index="${targetIndex}"]`);
                newCard.classList.add('dragging');
            }
        }
    });

    card.addEventListener('touchend', () => {
        card.classList.remove('dragging');
        card.style.transform = '';
    });

    card.addEventListener('touchcancel', () => {
        card.classList.remove('dragging');
        card.style.transform = '';
    });
}

function checkOrder() {
    const isCorrect = currentItems.every((item, index) => item.correct === index + 1);
    showTimes = true;
    showFeedback(
        isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!' : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
        isCorrect ? 'success' : 'error'
    );
    renderItems();
}

function shuffleItems() {
    currentItems = shuffle([...currentItems]);
    showTimes = false;
    renderItems();
}

function initWasteSortingGame() {
    score = 0;
    combo = 0;
    document.getElementById('score').textContent = score;
    document.getElementById('combo').textContent = `${combo}x`;
    
    const binsContainer = document.getElementById('waste-bins');
    binsContainer.innerHTML = '';

    Object.entries(WASTE_CATEGORIES).forEach(([key, category]) => {
        const bin = document.createElement('div');
        bin.className = `waste-bin ${category.color} text-white text-center p-6 rounded-xl mb-4`;
        bin.innerHTML = `
            <div class="text-4xl mb-2">${category.emoji}</div>
            <div class="text-xl font-bold">${category.name}</div>
        `;
        bin.addEventListener('touchend', () => handleSort(key));
        binsContainer.appendChild(bin);
    });

    generateNewItem();
}

function generateNewItem() {
    const categories = Object.keys(WASTE_CATEGORIES);
    const randomCategory = categories[Math.floor(Math.random() * categories.length)];
    const categoryItems = WASTE_CATEGORIES[randomCategory].items;
    const randomItem = categoryItems[Math.floor(Math.random() * categoryItems.length)];
    
    currentWasteItem = {
        ...randomItem,
        type: randomCategory
    };

    const itemContainer = document.getElementById('current-item');
    itemContainer.innerHTML = `
        <div class="bg-white p-8 rounded-xl shadow-md inline-block">
            <div class="text-6xl mb-4">${currentWasteItem.emoji}</div>
            <div class="text-xl font-bold">${currentWasteItem.name}</div>
        </div>
    `;
}

function handleSort(binType) {
    if (!currentWasteItem) return;

    if (currentWasteItem.type === binType) {
        const pointsEarned = currentWasteItem.points + Math.floor(combo / 3);
        score += pointsEarned;
        combo++;
        showFeedback(`+${pointsEarned} –æ—á–∫–æ–≤!`, 'success');
    } else {
        combo = 0;
        showFeedback(
            `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ ${WASTE_CATEGORIES[currentWasteItem.type].name.toLowerCase()}`,
            'error'
        );
    }

    document.getElementById('score').textContent = score;
    document.getElementById('combo').textContent = `${combo}x`;

    setTimeout(generateNewItem, 1500);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–∞—Å–∞–Ω–∏–∏
    document.addEventListener('touchstart', function enableFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen();
        }
        document.removeEventListener('touchstart', enableFullscreen);
    }, { once: true });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    document.getElementById('start-decomposition').addEventListener('touchend', () => {
        showScreen('decomposition');
        initDecompositionGame();
    });

    document.getElementById('start-sorting').addEventListener('touchend', () => {
        showScreen('waste-sorting');
        initWasteSortingGame();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    document.querySelectorAll('.back-to-menu').forEach(button => {
        button.addEventListener('touchend', backToMenu);
    });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    document.addEventListener('touchmove', (e) => {
        if (document.querySelector('.dragging')) {
            e.preventDefault();
        }
    }, { passive: false });
});;

const WASTE_CATEGORIES = {
    recycling: {
        name: '–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞',
        emoji: '‚ôªÔ∏è',
        color: 'bg-blue-500',
        items: [
            { name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞', emoji: 'üß¥', points: 1 },
            { name: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±–∞–Ω–∫–∞', emoji: 'ü´ô', points: 1 },
            { name: '–ì–∞–∑–µ—Ç–∞', emoji: 'üì∞', points: 1 },
            { name: '–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞', emoji: 'üì¶', points: 1 },
            { name: '–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è –±–∞–Ω–∫–∞', emoji: 'ü•§', points: 1 }
        ]
    },
    organic: {
        name: '–û—Ä–≥–∞–Ω–∏–∫–∞',
        emoji: 'üçÇ',
        color: 'bg-green-500',
        items: [
            { name: '–ë–∞–Ω–∞–Ω–æ–≤–∞—è –∫–æ–∂—É—Ä–∞', emoji: 'üçå', points: 1 },
            { name: '–Ø–±–ª–æ—á–Ω—ã–π –æ–≥—Ä—ã–∑–æ–∫', emoji: 'üçé', points: 1 },
            { name: '–ö–æ—Ñ–µ–π–Ω–∞—è –≥—É—â–∞', emoji: '‚òï', points: 1 },
            { name: '–õ–∏—Å—Ç—å—è', emoji: 'üçÇ', points: 1 },
            { name: '–°–∫–æ—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞', emoji: 'üåø', points: 1 }
        ]
    },
    hazardous: {
        name: '–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã',
        emoji: '‚ö†Ô∏è',
        color: 'bg-red-500',
        items: [
            { name: '–ë–∞—Ç–∞—Ä–µ–π–∫–∞', emoji: 'üîã', points: 2 },
            { name: '–õ–∞–º–ø–æ—á–∫–∞', emoji: 'üí°', points: 2 },
            { name: '–ö—Ä–∞—Å–∫–∞', emoji: 'üé®', points: 2 },
            { name: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞', emoji: 'üíä', points: 2 },
            { name: '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è', emoji: 'üß™', points: 2 }
        ]
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSet = 'set1';
let currentItems = [];
let showTimes = false;
let score = 0;
let combo = 0;
let currentWasteItem = null;
let draggedElement = null;
let touchStartY = 0;
let initialScrollTop = 0;

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–º
function toggleFullScreen() {
    if (!document.fullscreenElement && 
        !document.mozFullScreenElement && 
        !document.webkitFullscreenElement && 
        !document.msFullscreenElement) {
        if (document.documentElement.requestFullscreen) {
            document.documentElement.requestFullscreen();
        } else if (document.documentElement.mozRequestFullScreen) {
            document.documentElement.mozRequestFullScreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
            document.documentElement.webkitRequestFullscreen();
        } else if (document.documentElement.msRequestFullscreen) {
            document.documentElement.msRequestFullscreen();
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffle(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
}    